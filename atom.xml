<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>magic station</title>
  
  
  <link href="https://www.magicat.cc/atom.xml" rel="self"/>
  
  <link href="https://www.magicat.cc/"/>
  <updated>2025-06-02T15:45:49.000Z</updated>
  <id>https://www.magicat.cc/</id>
  
  <author>
    <name>MagicCat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>贪心算法</title>
    <link href="https://www.magicat.cc/posts/leetcode-greedy.html"/>
    <id>https://www.magicat.cc/posts/leetcode-greedy.html</id>
    <published>2025-06-02T15:45:49.000Z</published>
    <updated>2025-06-02T15:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>核心就是寻找局部最优解</p><h3 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h3><p><img src="https://cdn-a.markji.com/files/683dc7d734e5bdcd2375e27f_hd.png?e=1748881912195&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:3l74Aasb_tba8LowIttOoWDfNVU=" alt=""></p><p>本质上就是记录一下当前已经遍历过的最小值,然后和当前的值相减的同时维护一个ret即可,即扫一遍,每次维护前者最小值,然后和当前的扫描值计算算出最大值<br><img src="https://cdn-a.markji.com/files/683dc7da1a5e20b2c6c3c011_hd.png?e=1748881914307&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:Axv37D8jn9pF4hzhmChcIF_qYrI=" alt=""></p><p>贪心:当前的最大利润就是之前的minNum</p><h3 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55.跳跃游戏"></a>55.跳跃游戏</h3><p><img src="https://cdn-a.markji.com/files/683dc9ab1a5e20b2c6c40978_hd.png?e=1748882390898&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:Wvvca66Z68GdKVtEKt70YlqRr5M=" alt=""><br>贪心,维护当前能跳到的最远距离即可,遍历的过程中不断延申长度</p><h3 id="45-跳跃游戏Ⅱ"><a href="#45-跳跃游戏Ⅱ" class="headerlink" title="45.跳跃游戏Ⅱ"></a>45.跳跃游戏Ⅱ</h3><p><img src="https://cdn-a.markji.com/files/683dc9b01a5e20b2c6c409b8_hd.png?e=1748882390899&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:kO2g5xnt6hW4JUtzzthkuLTKXbo=" alt=""><br>这题和上题的区别就是这题不仅仅是需要计算能否到达,还需要记录需要几步,所以我的想法是维护一个次数数组,类似dp,遍历的时候同时更新nums[]所能到达地方的次数,但是这个复杂度是n方,有个n的复杂度暂时略<br><img src="https://cdn-a.markji.com/files/683dc9b51a5e20b2c6c409ee_hd.png?e=1748882390899&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:0kdUTxEyC1SDc3C15cpkSecp-yY=" alt=""></p>]]></content>
    
    
    <summary type="html">买卖股票&amp;跳跃游戏Ⅰ&amp;跳跃游戏Ⅱ</summary>
    
    
    
    <category term="算法题解" scheme="https://www.magicat.cc/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://www.magicat.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://www.magicat.cc/tags/LeetCode/"/>
    
    <category term="贪心" scheme="https://www.magicat.cc/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>进阶动态规划</title>
    <link href="https://www.magicat.cc/posts/leetcode-advanced-dp.html"/>
    <id>https://www.magicat.cc/posts/leetcode-advanced-dp.html</id>
    <published>2025-06-01T15:45:53.000Z</published>
    <updated>2025-06-01T15:45:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遍历一组集合-一组前面的数来执行状态转移"><a href="#遍历一组集合-一组前面的数来执行状态转移" class="headerlink" title="遍历一组集合/一组前面的数来执行状态转移"></a>遍历一组集合/一组前面的数来执行状态转移</h2><h3 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279.完全平方数"></a>279.完全平方数</h3><p><img src="https://cdn-a.markji.com/files/683c74801a5e20b2c6a95222_hd.png?e=1748795237969&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:1UV-_6lXXx0rPLGw60rpue9nfIY=" alt=""></p><p>感觉这题本质上是经典的考状态转移方程,遍历所有完全平方数,自身i就是num[i-j*j]+1的最小值ps:j要枚举所有完全平方数(满足条件,不能太大)</p><p>注意这里是要j*j&lt;=i的,不然当就是完全平方数的情况下,minNum没有被修改导致vec[i]=100000了,或者应该要在vec[i]=minNum之前判断一下minNum是否被修改了,即minNum!=100000才允许赋值</p><p>这个和下面两题的思想很接近,就是给一个集合(完全平方数集合,零钱集合,字典集合),都是按顺序填充状态数组,然后每次都需要遍历一遍集合</p><h3 id="139-单词拆分"><a href="#139-单词拆分" class="headerlink" title="139.单词拆分"></a>139.单词拆分</h3><p><img src="https://cdn-a.markji.com/files/683c758134e5bdcd235c2166_hd.png?e=1748795297618&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:9m6zgKIFpYftCQbrMfERqVmuMOs=" alt=""><br><img src="https://cdn-a.markji.com/files/683c75861a5e20b2c6a96c73_hd.png?e=1748795302210&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:Mm3GMoctJuGpWF9cIPARehyy2xQ=" alt=""></p><p>这题和上面两题的相同处是都需要状态容器然后从头开始遍历,并且每次都需要遍历字典/完全平方数/零钱面额的集合,但是不同处是这边只需要true和false,故不需要用一个int来选取最小值</p><h3 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416.分割等和子集"></a>416.分割等和子集</h3><p><img src="https://cdn-a.markji.com/files/683c754434e5bdcd235c1bee_hd.png?e=1748795237969&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:0mJOzF0801W770WTgmUiHeT7QkU=" alt=""></p><p>我一开始觉得这题和39.组合总和(回溯)很像,因为组合总和是找到某种子集组合为target,并且可以重复选,那这题本质上就是找到不重复子集总和为sum(全部值)/2即可</p><p>这边只要改成选和不选都+1即可,但是这样做发现报错超时(本质上是暴力枚举)</p><p>故这题要引入动态规划来优化时间</p><p>使用动态规划来优化,创建一个nums.size()+1×target/2+1大小的二维数组,vec[n][t]表示前n个元素能不能找到总和为t的子集,最终答案就是vec[num.size()][target/2]是否为1</p>]]></content>
    
    
    <summary type="html">完全平方数&amp;单词拆分&amp;分割等和子集</summary>
    
    
    
    <category term="算法题解" scheme="https://www.magicat.cc/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://www.magicat.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://www.magicat.cc/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="https://www.magicat.cc/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>基础动态规划</title>
    <link href="https://www.magicat.cc/posts/leetcode-basic-dp.html"/>
    <id>https://www.magicat.cc/posts/leetcode-basic-dp.html</id>
    <published>2025-06-01T02:00:00.000Z</published>
    <updated>2025-06-01T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态规划">动态规划</h2><p>根据前面一个来执行状态转移</p><h3 id="70-爬楼梯">70.爬楼梯</h3><p><img src="https://cdn-a.markji.com/files/683c73421a5e20b2c6a93cd8_hd.png?e=1748794722307&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:zgGAXkl5chISD5c6dVDKs3B2yZk=" alt=""></p><h3 id="118-杨辉三角">118.杨辉三角</h3><p><img src="https://cdn-a.markji.com/files/683c73491a5e20b2c6a93d4f_hd.png?e=1748794729661&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:2Bb4jkcTFIfGRPVO3osb6yj3wAg=" alt=""><br>本质上是数学规律,要注意先初始化周围一圈,然后从中间开始遍历,当前i是由上一层的i-1和i加起来的</p><h3 id="198-打家劫舍">198.打家劫舍</h3><p><img src="https://cdn-a.markji.com/files/683c73511a5e20b2c6a93dee_hd.png?e=1748794737757&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:GuuCfSweRw3Xg4SMBRLkrmudzL4=" alt=""></p>]]></content>
    
    
    <summary type="html">爬楼梯&amp;杨辉三角&amp;打家劫舍</summary>
    
    
    
    <category term="算法题解" scheme="https://www.magicat.cc/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://www.magicat.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://www.magicat.cc/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="https://www.magicat.cc/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>岛屿数量</title>
    <link href="https://www.magicat.cc/posts/leetcode-number-of-islands.html"/>
    <id>https://www.magicat.cc/posts/leetcode-number-of-islands.html</id>
    <published>2025-05-31T15:52:42.000Z</published>
    <updated>2025-05-31T15:52:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="岛屿数量">岛屿数量</h2><p><img src="https://cdn-a.markji.com/files/683b261d34e5bdcd23436852_hd.png?e=1748709437923&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:-9jmDerFHCGw9umD6fHw1H294NU=" alt=""></p><p>本质上就是遍历二维数组，然后当遇到1的时候ret++，同时用一个dfs执行深度优先，把和当前位置连接起来的1全部删除，这样继续遍历的时候就不会遇到重复的岛屿数量了。</p><p><img src="https://cdn-a.markji.com/files/683b26201a5e20b2c692dff5_hd.png?e=1748709441132&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:u34Q86l7ETlVX575xTUXXyvX7y8=" alt=""></p>]]></content>
    
    
    <summary type="html">LeetCode 200.岛屿数量题解与分析</summary>
    
    
    
    <category term="算法题解" scheme="https://www.magicat.cc/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://www.magicat.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://www.magicat.cc/tags/LeetCode/"/>
    
    <category term="DFS" scheme="https://www.magicat.cc/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>使用命名空间成员</title>
    <link href="https://www.magicat.cc/posts/cpp-namespace-use.html"/>
    <id>https://www.magicat.cc/posts/cpp-namespace-use.html</id>
    <published>2025-05-27T15:31:38.000Z</published>
    <updated>2025-05-27T15:41:03.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用命名空间成员"><a href="#使用命名空间成员" class="headerlink" title="使用命名空间成员"></a>使用命名空间成员</h2><h3 id="using-声明"><a href="#using-声明" class="headerlink" title="using 声明"></a><code>using</code> 声明</h3><ul><li>引入一个命名空间中的<strong>一个成员</strong>。</li><li>会<strong>隐藏外层作用域的同名实体</strong>。</li><li><code>using</code> 声明的有效范围<strong>到其所在的作用域结束为止</strong>。</li></ul><h3 id="using-指示"><a href="#using-指示" class="headerlink" title="using 指示"></a><code>using</code> 指示</h3><ul><li>引入一个命名空间中<strong>所有成员</strong>。</li><li><strong>不能</strong>出现在类作用域中。</li><li><strong>可以</strong>出现在局部作用域中，但会被视为出现在<strong>最近的外层作用域中</strong>。</li><li><strong>会与外层作用域的同名实体冲突</strong>，使用同名实体时会出现<strong>二义性错误</strong>，这与 <code>using</code> 声明的行为<strong>截然相反</strong>。</li><li><img src="https://cdn-a.markji.com/files/683312f2721bde64427c6708_hd.png?e=1748361790201&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:o0cd_f955q-C6zMNddkEG_mtl1I=" alt=""></li><li>有效范围也<strong>到其所在的作用域结束为止</strong>。</li></ul><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><ul><li>头文件中<strong>不应</strong>在顶层作用域使用 <code>using</code> 指示或 <code>using</code> 声明。</li><li>最多在<strong>函数或命名空间内部使用</strong>。</li></ul>]]></content>
    
    
    <summary type="html">C++中命名空间成员的使用</summary>
    
    
    
    <category term="C++教程" scheme="https://www.magicat.cc/categories/C-%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://www.magicat.cc/tags/C/"/>
    
    <category term="命名空间" scheme="https://www.magicat.cc/tags/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>命名空间定义</title>
    <link href="https://www.magicat.cc/posts/cpp-namespace.html"/>
    <id>https://www.magicat.cc/posts/cpp-namespace.html</id>
    <published>2025-05-27T15:27:43.000Z</published>
    <updated>2025-05-27T15:38:23.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命名空间定义"><a href="#命名空间定义" class="headerlink" title="命名空间定义"></a>命名空间定义</h2><p>namespace 命名空间名字 {具体内容} 结尾不需要分号</p><p>命名空间定义可以不连续，在初次定义之后，可以又定义一个同名的，会打开已存在的命名空间并添加新成员的声明</p><p>正常情况下#include不应该在命名空间里面，不允许嵌套容器</p>]]></content>
    
    
    <summary type="html">C++中命名空间的定义</summary>
    
    
    
    <category term="C++教程" scheme="https://www.magicat.cc/categories/C-%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://www.magicat.cc/tags/C/"/>
    
    <category term="命名空间" scheme="https://www.magicat.cc/tags/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>异常类层次</title>
    <link href="https://www.magicat.cc/posts/cpp-exception-hierarchy.html"/>
    <id>https://www.magicat.cc/posts/cpp-exception-hierarchy.html</id>
    <published>2025-05-26T15:15:25.000Z</published>
    <updated>2025-05-26T15:15:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-a.markji.com/files/682d6b6c1a5e20b2c689ee30_hd.png?e=1748277226369&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:rnb9Sl68RcbnCCDVGRq719apmhE=" alt=""><br>也可以自定义异常类，继承于上面的exception类或其子类。</p><p>构造函数通常传入string参数描述异常信息。<br><img src="https://cdn-a.markji.com/files/68330ac9721bde64427be187_hd.png?e=1748277226369&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:cSobHpzH1G2p277_NqFUVnup_XI=" alt=""></p>]]></content>
    
    
    <summary type="html">C++标准库异常类层次结构及自定义异常类</summary>
    
    
    
    <category term="C++教程" scheme="https://www.magicat.cc/categories/C-%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://www.magicat.cc/tags/C/"/>
    
    <category term="异常处理" scheme="https://www.magicat.cc/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    <category term="异常类" scheme="https://www.magicat.cc/tags/%E5%BC%82%E5%B8%B8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>noexcept异常说明</title>
    <link href="https://www.magicat.cc/posts/cpp-noexcept.html"/>
    <id>https://www.magicat.cc/posts/cpp-noexcept.html</id>
    <published>2025-05-26T15:12:25.000Z</published>
    <updated>2025-05-26T15:12:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="noexcept说明符">noexcept说明符</h2><p>noexcept说明指定某个函数不会抛出异常，直接加在函数的参数列表后面。在成员函数中，noexcept说明符需要跟在const及引用限定符之后，而在final、override或虚函数的=0之前。</p><p>需要出现在函数的所有声明语句和定义语句中，也可以在函数指针的声明和定义中指定noexcept。</p><p>如果违法了异常说明，仍然在函数中抛出异常，将直接终止程序。</p><p>noexcept说明符接受一个可选的实参，该实参必须能转换为bool类型：如果实参是true,则函数不会抛出异常；如果实参是false,则函数可能抛出异常。</p><h2 id="noexcept运算符">noexcept运算符</h2><p>noexcept运算符是一个一元运算符，它的返回值是一个bool类型的右值常量表达式，用于表示给定的表达式是否会抛出异常。和sizeof类似，noexcept也不会求其运算对象的值。<br><img src="https://cdn-a.markji.com/files/682d5ff9c229c521d8bd58d9_hd.png?e=1748277226369&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:7XwGvSZjSNIU6-ZDTEIGQLmhQGE=" alt=""></p>]]></content>
    
    
    <summary type="html">C++中noexcept说明符和运算符的使用方法</summary>
    
    
    
    <category term="C++教程" scheme="https://www.magicat.cc/categories/C-%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://www.magicat.cc/tags/C/"/>
    
    <category term="异常处理" scheme="https://www.magicat.cc/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    <category term="noexcept" scheme="https://www.magicat.cc/tags/noexcept/"/>
    
  </entry>
  
  <entry>
    <title>重新抛出与构造函数异常</title>
    <link href="https://www.magicat.cc/posts/cpp-rethrow-exception.html"/>
    <id>https://www.magicat.cc/posts/cpp-rethrow-exception.html</id>
    <published>2025-05-25T15:09:25.000Z</published>
    <updated>2025-05-25T15:09:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重新抛出异常">重新抛出异常</h2><p>在catch模块的最后加上空的throw语句，可以重新抛出，沿着调用链向上传递。</p><p>如果catch的异常声明是引用类型，语句内又该改变了其参数内容，重新抛出时就会抛出改变后的异常对象。<br><img src="https://cdn-a.markji.com/files/682d2b681a5e20b2c682bf74_hd.png?e=1748187782642&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:fU2CVCtw-9cBIJtYZITSxtPONg8=" alt=""></p><h2 id="捕获所有异常">捕获所有异常</h2><p>catch（…)可以捕获所有异常，通常和重新抛出语句一起使用，其中catch执行当前局部能完成的工作，随后重新抛出异常。</p><p>如果catch(…)与其他几个catch语句一起出现，则catch(…)必须在最后的位置。出现在捕获所有异常语句后面的catch语句将永远不会被匹配。</p><h2 id="构造函数异常处理">构造函数异常处理</h2><p>要想处理构造函数初始值抛出的异常，我们必须将构造函数写成函数try语句块。<br><img src="https://cdn-a.markji.com/files/682d5847c229c521d8bcab43_hd.png?e=1748187782642&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:pTA7y2RI1Vy_pcmVAYIVCUG_okU=" alt=""><br>在初始化构造函数的参数时也可能发生异常，这样的异常不属于函数try语句块的一部分。构造函数try语句块只能处理构造函数开始执行后发生的异常。<br><img src="https://cdn-a.markji.com/files/682d5a42c229c521d8bcd54e_hd.png?e=1748187782642&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:snpOu2HX3-bX7zC1SHki6g174sM=" alt=""></p>]]></content>
    
    
    <summary type="html">C++中异常的重新抛出机制及构造函数异常处理</summary>
    
    
    
    <category term="C++教程" scheme="https://www.magicat.cc/categories/C-%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://www.magicat.cc/tags/C/"/>
    
    <category term="异常处理" scheme="https://www.magicat.cc/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    <category term="构造函数" scheme="https://www.magicat.cc/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>捕获异常</title>
    <link href="https://www.magicat.cc/posts/cpp-catch-exception.html"/>
    <id>https://www.magicat.cc/posts/cpp-catch-exception.html</id>
    <published>2025-05-22T15:38:29.000Z</published>
    <updated>2025-05-22T15:38:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用捕获异常">引用捕获异常</h2><p>如果你要处理的是继承体系中的异常类型，用&quot;引用&quot;来接收异常对象是最佳实践，可以避免复制、保留完整对象信息，方便后续操作。</p><p>比如如果catch的参数是基类类型，则我们可以使用其派生类类型的异常对象对其进行初始化，引用传参能保证该异常对象不发生对象切片。<br><img src="https://cdn-a.markji.com/files/682d271d1a5e20b2c6826042_hd.png?e=1747930607729&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:NzxHuyGRC7dtvbJHd8l-QOWC7fI=" alt=""></p><p>e.g.抛出派生类异常对象，catch中使用基类指针捕获异常</p><h2 id="查找匹配的处理代码">查找匹配的处理代码</h2><p>按出现的顺序逐一匹配</p><p>只允许从非常量向常量，派生类向基类，数组被转换成指向数组（元素）类型的指针，函数被转换成指向该函数类型的指针的类型转换。</p><p>不允许标准算术类型和类类型等转换规则。</p><p>如果在多个catch语句的类型之间存在着继承关系，则我们应该把继承链最底端的类放在前面，而将继承链最顶端的类放在后面。</p>]]></content>
    
    
    <summary type="html">C++中异常捕获的最佳实践及注意事项</summary>
    
    
    
    <category term="C++教程" scheme="https://www.magicat.cc/categories/C-%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://www.magicat.cc/tags/C/"/>
    
    <category term="异常处理" scheme="https://www.magicat.cc/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    <category term="继承" scheme="https://www.magicat.cc/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>抛出异常对象</title>
    <link href="https://www.magicat.cc/posts/cpp-exception-handling.html"/>
    <id>https://www.magicat.cc/posts/cpp-exception-handling.html</id>
    <published>2025-05-21T15:55:35.000Z</published>
    <updated>2025-05-21T15:55:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="try语句块和异常处理">try语句块和异常处理</h2><p>throw后面紧跟一个表达式，表达式类型就是抛出异常的类型</p><p>try语句块<br><img src="https://cdn-a.markji.com/files/682d44ba1a5e20b2c686d818_hd.png?e=1747845441213&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:3TDY0EmN8m-HRpEjKAsmSwnt_R8=" alt=""><br>program-statements里面放正常的程序逻辑，一旦执行到throw语句，就中断正常的程序，开始寻找匹配的catch</p><p>catch语句<br><img src="https://cdn-a.markji.com/files/682d542dc229c521d8bc7266_hd.png?e=1747845441213&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:F2HZC8dPei50R4EymUXJc_aCgU8=" alt=""></p><h2 id="抛出异常">抛出异常</h2><p>throw抛出异常，后面的语句不再执行，跳转到与之匹配的catch模块</p><p>栈展开就是在程序抛出异常后，沿着函数调用链一层层往回找，找到包住throw语句的try和相匹配的能处理异常的catch代码的过程。如果找到了就处理，找不到就程序崩溃。<br><img src="https://cdn-a.markji.com/files/682be2251a5e20b2c665c915_hd.png?e=1747845441213&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:rOHx9vc72x-6Y5_Dz-Ww222qUrk=" alt=""></p><p>在栈展开的过程中，调用链上退出的函数中创建的局部对象会被自动销毁。每退出一层函数、一个代码块，里面的局部变量（对象）就会像正常离开作用域一样被销毁。</p><p>析构函数总是会被执行的，但是函数中负责释放资源的代码却可能被跳过，如果一个块分配了资源，并且在负责释放这些资源的代码(delete)前面发生了异常，则释放资源的代码将不会被执行。</p><h2 id="异常对象">异常对象</h2><p>当使用 throw 抛出一个异常时，其实是创建了一个特殊的对象，叫做&quot;异常对象&quot;。</p><p>1.throw 会&quot;拷贝&quot;那个异常值（不是原样扔出去，而是拷贝/移动一份）；<br>2.这份异常对象会放到一个专门由编译器管理的内存空间里，确保后续 catch 能访问；<br>3.一旦异常处理完毕，这个异常对象会被自动销毁；<br>4.如果抛出的东西是一个类对象，它的构造函数、析构函数、拷贝/移动构造函数都必须是可访问的，不然编译器会报错。</p><p>不要抛指针指向局部对象，局部对象在栈展开退出代码块时就会销毁，导致捕获空悬指针</p><p>对象切片：类继承中，静态编译时类型决定了异常对象的类型，即如果抛出的基类对象指针是用派生类赋值的，只会复制并抛出基类部分。</p>]]></content>
    
    
    <summary type="html">C++中异常处理机制的完整介绍</summary>
    
    
    
    <category term="C++教程" scheme="https://www.magicat.cc/categories/C-%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://www.magicat.cc/tags/C/"/>
    
    <category term="异常处理" scheme="https://www.magicat.cc/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    <category term="栈展开" scheme="https://www.magicat.cc/tags/%E6%A0%88%E5%B1%95%E5%BC%80/"/>
    
  </entry>
  
  <entry>
    <title>基础链表</title>
    <link href="https://www.magicat.cc/posts/leetcode-linked-list-problems.html"/>
    <id>https://www.magicat.cc/posts/leetcode-linked-list-problems.html</id>
    <published>2025-05-20T14:50:37.000Z</published>
    <updated>2025-05-20T14:50:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相交链表">相交链表</h2><p><img src="https://cdn-a.markji.com/files/682ca1551a5e20b2c67dab55_hd.png?e=1747757941825&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:7_sxcdj8TmQcjyLdtrZnXlE29nE=" alt=""></p><p>ps:因为可能会存在没有相交的点,所以一直往前走,然后回到开头继续的方法会导致死循环(如果一定有焦点是可以的)</p><p>方法1.使用哈希表/集合,先遍历一个链表,把节点存进去,然后遍历另外一个链表查看是否在哈希表中已经存放过了</p><p>方法2.使用栈,先开两个栈,然后遍历一遍把两个链表分别放进栈里,然后一个一个pop找到最后一个还是一样的节点</p><h2 id="反转链表">反转链表</h2><p><img src="https://cdn-a.markji.com/files/682ca1c61a5e20b2c67db51d_hd.png?e=1747758054690&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:5ntoiktP1anoxMcdE7xms180weI=" alt=""></p><p>注意这题是要返回反转后的链表头</p><h3 id="递归解法">递归解法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head||!head-&gt;next)<span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">auto</span> ret=<span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next=head;</span><br><span class="line">        head-&gt;next =<span class="literal">nullptr</span>;<span class="comment">//记得这里要切断指向,不然会相互指着,形成环</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="comment">//就是本质上是要处理尾节点的指向要指向空,同时为了处理传进来是空的情况,一开始要同时判断!head才可以</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">相交链表&amp;反转链表</summary>
    
    
    
    <category term="算法题解" scheme="https://www.magicat.cc/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://www.magicat.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://www.magicat.cc/tags/LeetCode/"/>
    
    <category term="链表" scheme="https://www.magicat.cc/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>字母异位词分组</title>
    <link href="https://www.magicat.cc/posts/leetcode-group-anagrams.html"/>
    <id>https://www.magicat.cc/posts/leetcode-group-anagrams.html</id>
    <published>2025-05-15T15:52:36.000Z</published>
    <updated>2025-05-15T15:52:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-a.markji.com/files/68260df02220c11a36c3bf33_hd.png?e=1747326993196&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:iHAeM_rlnqqUj3zHHexv48wvmeM=" alt=""></p><h2 id="哈希表解法">哈希表解法</h2><p>key就是排好序的str，value就是vector<string>的原始str，最后遍历一遍这个哈希表拼接到vec中就行。</p>]]></content>
    
    
    <summary type="html">LeetCode Hot100 字母异位词分组的哈希表解法</summary>
    
    
    
    <category term="算法题解" scheme="https://www.magicat.cc/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://www.magicat.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://www.magicat.cc/tags/LeetCode/"/>
    
    <category term="哈希表" scheme="https://www.magicat.cc/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="https://www.magicat.cc/posts/leetcode-two-sum.html"/>
    <id>https://www.magicat.cc/posts/leetcode-two-sum.html</id>
    <published>2025-05-15T15:48:04.000Z</published>
    <updated>2025-05-15T15:48:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-a.markji.com/files/68260d18fae6898c0c782ddb_hd.png?e=1747326777192&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:bB8UnaqcvzESiOPfxSYyLCzCv1s=" alt=""></p><h2 id="解法一：暴力枚举"><a href="#解法一：暴力枚举" class="headerlink" title="解法一：暴力枚举"></a>解法一：暴力枚举</h2><p>复杂度n^2，对每个执行枚举。</p><h2 id="解法二：排序双指针"><a href="#解法二：排序双指针" class="headerlink" title="解法二：排序双指针"></a>解法二：排序双指针</h2><p>复杂度nlogn，排好序之后用结构体保存初始下标，后从首尾往中间遍历即可。</p><h2 id="解法三：哈希表"><a href="#解法三：哈希表" class="headerlink" title="解法三：哈希表"></a>解法三：哈希表</h2><p>复杂度n，key是值，value是index，遍历的过程中查找是否存在对应的target-x，没找到就把他加入然后继续找。<br><img src="https://cdn-a.markji.com/files/68260d24fae6898c0c782eaa_hd.png?e=1747326788512&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:cW1cbQQwquvKtvVUPNrIz0vxIEQ=" alt=""></p>]]></content>
    
    
    <summary type="html">LeetCode Hot100 两数之和的三种解法详解</summary>
    
    
    
    <category term="算法题解" scheme="https://www.magicat.cc/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://www.magicat.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="https://www.magicat.cc/tags/LeetCode/"/>
    
    <category term="哈希表" scheme="https://www.magicat.cc/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>区块链流程图3 交易系统实现</title>
    <link href="https://www.magicat.cc/posts/blockchain-transaction-system.html"/>
    <id>https://www.magicat.cc/posts/blockchain-transaction-system.html</id>
    <published>2025-05-01T13:12:37.000Z</published>
    <updated>2025-05-01T13:12:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交易结构设计">交易结构设计</h2><h3 id="TXInput结构">TXInput结构</h3><ul><li>引用的输出索引(在vec中的位置)</li><li>解锁脚本（这里简化为自身公钥）</li><li>如果我的地址和输出索引的锁定脚本一样，证明我可以用这笔钱</li></ul><h3 id="TXOutput结构">TXOutput结构</h3><ul><li>每个output索引为vec中的位置</li><li>币的数量</li><li>锁定脚本（发送方公钥）</li><li>表示谁有资格使用这笔钱(我发给谁了)</li><li><img src="https://cdn-a.markji.com/files/68137352e895986c474ac32e_hd.png?e=1746107762858&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:lULgq0qdO5GNjMfcBF0HfbbVt70=" alt=""></li></ul><h3 id="Transaction结构">Transaction结构</h3><p>成员：</p><ul><li>Vec<TXOutput></li><li>Vec<TXInput></li><li>id</li></ul><p>方法：</p><h4 id="new-UTXO">new_UTXO</h4><ul><li>find_spendable_outputs(blockchain函数)</li><li>找到需要使用的vec<input>证明我可以使用这些钱</li><li>把全部的utxo都拿出来了，拼成input(证实自己有动用这笔钱权力)</li><li>把全部余额合并成一个output，发出去</li><li>计算要找回多少钱，发一份给自身</li><li>最后把vin和vout拼接成Transaction返回’</li><li><img src="https://cdn-a.markji.com/files/6813735ce895986c474ad1db_hd.png?e=1746107772788&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:NHHW1KSbXeX45LTwMGNLFscJViY=" alt=""></li></ul><h4 id="new-coinbase">new_coinbase</h4><ul><li>直接生成一个tx</li><li>input里的解锁脚本和out索引都没有，因为不需要证明就可以用(新块)</li><li>拼接output然后返回tx</li></ul><h4 id="is-coinbase">is_coinbase</h4><ul><li>就判断当前tx是否只有一个input啥的就行</li></ul><h2 id="Block结构修改">Block结构修改</h2><h3 id="数据结构">数据结构</h3><ul><li>把data字段换成了Vec<Transaction></li></ul><h3 id="方法实现">方法实现</h3><h4 id="prepare-hash-data">prepare_hash_data</h4><ul><li>把待哈希内容序列化</li><li>注：由于时间戳一开始就被计算出来，故并不是挖矿成功的时间戳</li></ul><h4 id="validate">validate</h4><ul><li>调用prepare获取数据</li><li>注：每次要重新调用prepare是因为nonce每次都变化了</li><li>判断是否哈希值符合要求</li></ul><h4 id="run-proof-of-work">run_proof_of_work</h4><ul><li>循环调用validata</li><li>每次把nonce+1，成功了则把self.hash赋值</li></ul><h4 id="new-block">new_block</h4><ul><li>获取当前时间戳</li><li>新创建block，赋值好前哈希，Vec<Transaction>，时间戳</li><li>调用run_proof赋值哈希</li></ul><h4 id="new-genesis-block">new_genesis_block</h4><ul><li>直接生成</li></ul><h2 id="Blockchain结构优化">Blockchain结构优化</h2><h3 id="成员变量">成员变量</h3><ul><li>继续删除currentHash，转移到迭代器里面</li><li>tip最新区块的哈希值</li><li>db</li></ul><h3 id="方法实现-2">方法实现</h3><h4 id="new-构造函数">new()构造函数</h4><ul><li>返回blockchain</li><li>打开db</li><li>调用get(“last”)查询<ul><li>last为存储的最后一个哈希值</li><li>若不存在：?表示式报错返回</li><li>若存在：把tip和db都赋值后返回</li></ul></li></ul><h4 id="create-blockchain">create_blockchain</h4><ul><li>调用生成创世交易函数</li><li>把tx传入生成创世块函数，生成创世块</li><li>把创世块信息等insert进数据库</li></ul><h4 id="find-spendable-outputs">find_spendable_outputs</h4><ul><li>在区块链中查找发送者可用的未花费输出</li><li>返回元组(总金额, 可用输出的map)</li></ul><h4 id="find-UTXO">find_UTXO</h4><ul><li>把find_unspent_transactions的返回的tx提纯</li><li>直接返回UTXO</li></ul><h4 id="find-unspent-transactions">find_unspent_transactions</h4><ul><li>获取包含自身地址的所有未花费的输出</li><li>从新往旧遍历区块链</li><li>先把vout判断是否被vin引用了</li><li>再把当前块的vin引用的vout注册进哈希</li></ul><h4 id="find-spendable-outputs-2">find_spendable_outputs</h4><ul><li>查找可用于支付指定金额的输出</li><li>调用find_unspent</li><li>遍历所有的tx中的output，然后不断加accumulated</li><li>够了就返回积累值和对应的output</li></ul><h4 id="mine-block（原add-block）">mine_block（原add_block）</h4><ul><li>从last获取新块的前哈希</li><li>调用new_block(data, prev.get_hash())</li><li>每个块都是一个键值对存储key为hash，value是块的序列化</li><li>插入db，并更新last和tip和curretHash</li></ul><h4 id="Iterator">Iterator</h4><ul><li>next<ul><li>调用currentHash来get块</li><li>返回这个块，并且把curretHash赋值为前hash</li></ul></li></ul><h2 id="CLI改进">CLI改进</h2><h3 id="结构修改">结构修改</h3><ul><li>删除了blockchain成员</li></ul><h3 id="命令实现">命令实现</h3><p>run：</p><ul><li>注册命令行app</li><li>判断是否输入了对应命令<ul><li>删除了addblock/换成send</li><li>执行print_chain</li><li>getbalance：调用find_UTXO之后遍历相加</li><li>createblockchain：调用create_blockchain</li><li>send：<ul><li>解析from,to,amount</li><li>调用new_UTXO生成交易信息</li><li>调用mine_block生成区块</li></ul></li></ul></li></ul><h2 id="主程序实现">主程序实现</h2><p><a href="http://main.rs">main.rs</a>：</p><ul><li>初始化日志系统</li><li>创建cli</li><li>调用run</li></ul>]]></content>
    
    
    <summary type="html">Rust实现区块链交易系统的详细设计与实现流程</summary>
    
    
    
    <category term="区块链技术" scheme="https://www.magicat.cc/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="区块链" scheme="https://www.magicat.cc/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Rust" scheme="https://www.magicat.cc/tags/Rust/"/>
    
    <category term="交易系统" scheme="https://www.magicat.cc/tags/%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>区块链流程图2 命令行实现</title>
    <link href="https://www.magicat.cc/posts/blockchain-cli.html"/>
    <id>https://www.magicat.cc/posts/blockchain-cli.html</id>
    <published>2025-05-01T13:10:37.000Z</published>
    <updated>2025-05-01T13:10:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Block结构实现">Block结构实现</h2><h3 id="数据准备">数据准备</h3><p>prepare_hash_data：</p><ul><li>把待哈希内容序列化</li><li>注：由于时间戳一开始就被计算出来，故并不是挖矿成功的时间戳</li></ul><h3 id="验证机制">验证机制</h3><p>validate：</p><ul><li>调用prepare获取数据</li><li>注：每次要重新调用prepare是因为nonce每次都变化了</li><li>判断是否哈希值符合要求</li></ul><h3 id="工作量证明执行">工作量证明执行</h3><p>run_proof_of_work：</p><ul><li>循环调用validata</li><li>每次把nonce+1，成功了则把self.hash赋值</li></ul><h3 id="区块创建">区块创建</h3><p>new_block：</p><ul><li>获取当前时间戳</li><li>新创建block，赋值好前哈希，data，时间戳</li><li>调用run_proof赋值哈希</li></ul><h3 id="创世块生成">创世块生成</h3><p>new_genesis_block：</p><ul><li>直接生成</li></ul><h2 id="Blockchain结构实现">Blockchain结构实现</h2><h3 id="成员变量">成员变量</h3><ul><li>删除blockchains</li><li>tip最新区块的哈希值</li><li>db</li><li>currentHash（用于迭代器）当前哈希</li><li>从尾到头部返回</li></ul><h3 id="构造函数">构造函数</h3><p>new()：</p><ul><li>返回blockchain</li><li>打开db</li><li>调用get(“last”)查询<ul><li>last为存储的最后一个哈希值</li><li>若不存在<ul><li>创建创世块并insert</li><li>为last字段也insert赋值</li><li>初始化blockchain并flush返回</li></ul></li><li>若存在<ul><li>把tip和currentHash都赋值为这个哈希</li><li>赋值db之后返回</li></ul></li></ul></li></ul><h3 id="区块添加">区块添加</h3><p>add_block：</p><ul><li>从last获取新块的前哈希</li><li>调用new_block(data, prev.get_hash())</li><li>每个块都是一个键值对存储key为hash，value是块的序列化</li><li>插入db，并更新last和tip和curretHash</li></ul><h3 id="迭代器实现">迭代器实现</h3><p>Iterator：</p><ul><li>next<ul><li>调用currentHash来get块</li><li>返回这个块，并且把curretHash赋值为前hash</li></ul></li></ul><h2 id="CLI实现">CLI实现</h2><h3 id="结构定义">结构定义</h3><ul><li>就一个blockchain成员</li></ul><h3 id="初始化">初始化</h3><p>new：</p><ul><li>调用blockchain构造函数</li></ul><h3 id="命令行运行">命令行运行</h3><p>run：</p><ul><li>注册命令行app</li><li>判断是否输入了对应命令<ul><li>执行addblock</li><li>执行print_chain</li></ul></li></ul><h2 id="主程序实现">主程序实现</h2><p><a href="http://main.rs">main.rs</a>：</p><ul><li>初始化日志系统</li><li>创建cli</li><li>调用run</li></ul>]]></content>
    
    
    <summary type="html">Rust实现区块链命令行接口及数据持久化的详细流程</summary>
    
    
    
    <category term="区块链技术" scheme="https://www.magicat.cc/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="区块链" scheme="https://www.magicat.cc/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Rust" scheme="https://www.magicat.cc/tags/Rust/"/>
    
    <category term="CLI" scheme="https://www.magicat.cc/tags/CLI/"/>
    
  </entry>
  
  <entry>
    <title>区块链流程图1 工作量证明</title>
    <link href="https://www.magicat.cc/posts/blockchain-pow.html"/>
    <id>https://www.magicat.cc/posts/blockchain-pow.html</id>
    <published>2025-05-01T13:04:37.000Z</published>
    <updated>2025-05-01T13:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Block结构实现">Block结构实现</h2><h3 id="数据准备">数据准备</h3><p>prepare_hash_data：</p><ul><li>把待哈希内容序列化</li><li>注：由于时间戳一开始就被计算出来，故并不是挖矿成功的时间戳</li></ul><h3 id="验证机制">验证机制</h3><p>validate：</p><ul><li>没检查溢出情况</li><li>调用prepare获取数据</li><li>注：每次要重新调用prepare是因为nonce每次都变化了</li><li>判断是否哈希值符合要求</li></ul><h3 id="工作量证明执行">工作量证明执行</h3><p>run_proof_of_work：</p><ul><li>循环调用validata</li><li>每次把nonce+1，成功了则把self.hash赋值</li></ul><h3 id="区块创建">区块创建</h3><p>new_block：</p><ul><li>获取当前时间戳</li><li>新创建block，赋值好前哈希，data，时间戳</li><li>调用run_proof赋值哈希</li></ul><h3 id="创世块生成">创世块生成</h3><p>new_genesis_block：</p><ul><li>直接生成</li></ul><h2 id="Blockchain结构实现">Blockchain结构实现</h2><h3 id="初始化">初始化</h3><p>new()：</p><ul><li>调用生成创世块</li></ul><h3 id="区块添加">区块添加</h3><p>add_block：</p><ul><li>从vec尾部获取新块的前哈希</li><li>调用new_block(data, prev.get_hash())</li></ul><h2 id="主程序实现">主程序实现</h2><p><a href="http://main.rs">main.rs</a>：</p><ul><li>创建区块链Blockchain::new()</li><li>调用add_block然后传入data</li><li>bc.add_block(String::from(“Send 1 BTC to Ivan”))</li></ul><p>注意：没检查溢出情况</p>]]></content>
    
    
    <summary type="html">Rust实现区块链工作量证明机制的详细流程</summary>
    
    
    
    <category term="区块链技术" scheme="https://www.magicat.cc/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="区块链" scheme="https://www.magicat.cc/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Rust" scheme="https://www.magicat.cc/tags/Rust/"/>
    
    <category term="工作量证明" scheme="https://www.magicat.cc/tags/%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AF%81%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>区块链网络通信流程</title>
    <link href="https://www.magicat.cc/posts/blockchain-network-communication.html"/>
    <id>https://www.magicat.cc/posts/blockchain-network-communication.html</id>
    <published>2025-05-01T13:03:27.000Z</published>
    <updated>2025-05-01T13:03:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接收方处理流程">接收方处理流程</h2><h3 id="服务启动">服务启动</h3><p>调用startserver</p><h3 id="Version消息处理">Version消息处理</h3><p>处理handleVersion：</p><ul><li>若自身慢了，则请求获取块</li><li>若自身快了，则发version给对方</li><li>注：发送version是用来请求同步的</li></ul><h3 id="Inv消息处理">Inv消息处理</h3><p>处理handleInv：</p><ul><li>inv只是一个清单，表示自己有什么块和tx</li><li>收到发送方的inv之后自己判断哪些是要下载的</li><li>然后调用getData执行下载</li></ul><h3 id="Block消息处理">Block消息处理</h3><p>处理handleBlock：</p><ul><li>把新增的区块加到自身链里</li></ul><h3 id="交易处理">交易处理</h3><p>处理handleTx</p><h2 id="发送方处理流程">发送方处理流程</h2><h3 id="服务启动-2">服务启动</h3><p>调用startserver</p><h3 id="区块请求处理">区块请求处理</h3><p>处理handleGetBlock</p><h3 id="数据请求处理">数据请求处理</h3><p>处理getData</p>]]></content>
    
    
    <summary type="html">区块链网络中节点间通信的详细流程及处理机制</summary>
    
    
    
    <category term="区块链技术" scheme="https://www.magicat.cc/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="区块链" scheme="https://www.magicat.cc/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="P2P网络" scheme="https://www.magicat.cc/tags/P2P%E7%BD%91%E7%BB%9C/"/>
    
    <category term="网络通信" scheme="https://www.magicat.cc/tags/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>区块链网络架构</title>
    <link href="https://www.magicat.cc/posts/blockchain-network.html"/>
    <id>https://www.magicat.cc/posts/blockchain-network.html</id>
    <published>2025-04-30T15:23:59.000Z</published>
    <updated>2025-04-30T15:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络结构">网络结构</h2><p>区块链网络是p2p拓扑扁平结构，每个节点既是服务器也是客户端。</p><h2 id="节点类型">节点类型</h2><h3 id="节点成员分类">节点成员分类</h3><ul><li>矿工</li><li>全节点</li><li>SPV简单支付验证</li></ul><h3 id="全节点">全节点</h3><p>全节点记录了完整区块信息，同时提供了路由操作。</p><h3 id="SPV节点">SPV节点</h3><p>SPV不存放全部，而是一个交易子集，比如，发送到某个指定地址的交易(如全部发给Alice的交易)。</p><h2 id="交易同步机制">交易同步机制</h2><p>交易场景如下：<br><img src="https://cdn-a.markji.com/files/680f7bc96092fd692cbd1817_hd.png?e=1746029138069&amp;token=xX63b9jqTlDOcGmctt5K9254rV0LG8hS9BmDeFBy:4eldrch0jXTVfMw_MgBc06yr5XM=" alt=""><br>用一个version进行节点间的通信，判断双方谁的链更长，从而和中心节点或者对方更新链信息。</p>]]></content>
    
    
    <summary type="html">区块链P2P网络的结构特点及节点类型详解</summary>
    
    
    
    <category term="区块链技术" scheme="https://www.magicat.cc/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="区块链" scheme="https://www.magicat.cc/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="P2P网络" scheme="https://www.magicat.cc/tags/P2P%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>区块链核心代码4</title>
    <link href="https://www.magicat.cc/posts/blockchain-wallet.html"/>
    <id>https://www.magicat.cc/posts/blockchain-wallet.html</id>
    <published>2025-04-29T15:50:37.000Z</published>
    <updated>2025-04-29T15:50:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="钱包基础结构">钱包基础结构</h2><h3 id="1-钱包结构体">1. 钱包结构体</h3><p>新建钱包结构体，里面有：</p><ul><li>公私钥对</li><li>构造函数</li><li>辅助函数</li></ul><h3 id="2-地址生成">2. 地址生成</h3><p>给钱包增加getAddress成员函数，执行以下步骤：</p><ol><li>对公钥执行哈希</li><li>对①结果加上版本信息</li><li>对②结果哈希两次</li><li>拼接②结果和③结果</li><li>对④结果执行Base56算法</li></ol><h2 id="交易结构优化">交易结构优化</h2><h3 id="3-交易结构修改">3. 交易结构修改</h3><ul><li>input中加入自身公钥和签名</li><li>output还是放value和公钥</li></ul><h2 id="安全机制">安全机制</h2><h3 id="4-鉴权系统">4. 鉴权系统</h3><p>提供一系列鉴权函数，检验公钥是否合法。</p><h3 id="5-签名系统">5. 签名系统</h3><p>提供签名和验证签名的函数：</p><ul><li>对自身公钥所引用的输出的公钥(UTXO)和value执行签名</li><li>修改unspendutxo函数，把鉴权逻辑改成使用签名</li></ul>]]></content>
    
    
    <summary type="html">区块链系统中钱包结构及其加密验证机制的实现</summary>
    
    
    
    <category term="区块链技术" scheme="https://www.magicat.cc/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="C++" scheme="https://www.magicat.cc/tags/C/"/>
    
    <category term="区块链" scheme="https://www.magicat.cc/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="密码学" scheme="https://www.magicat.cc/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
</feed>
